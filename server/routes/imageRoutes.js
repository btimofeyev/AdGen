// server/routes/imageRoutes.js
const express = require('express');
const router = express.Router();
const imageController = require('../controllers/imageController');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { verifyToken, optionalAuth } = require('../middleware/auth');

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, '../uploads'); // Temporary local storage
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // Using a timestamp and random string for uniqueness to avoid collisions before processing
    cb(null, `${Date.now()}-${Math.random().toString(36).substring(2, 8)}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit
});

// Public routes
router.get('/themes-formats', imageController.getThemesAndFormats);

// Upload endpoint for AdCreator reference images (saves to local './uploads' temporarily)
// Assuming your AdCreator frontend calls POST /api/upload for single reference
router.post('/upload', optionalAuth, upload.single('image'), imageController.uploadImage); 
// And POST /api/upload-multiple for multiple references
router.post('/upload-multiple', optionalAuth, upload.array('images', 4), imageController.uploadImages);


// NEW: Upload endpoint specifically for Social Media Post images
// This will optimize and upload to Supabase Storage, then return public URL & Supabase path
// Frontend (SocialPostForm) should call POST /api/upload/social-post
router.post('/upload/social-post', verifyToken, upload.single('image'), imageController.uploadSocialPostImage);


// Generation routes
// These use local filepaths from /upload or /upload-multiple for reference images
router.post('/generate/multiple-references', optionalAuth, imageController.generateWithMultipleReferences);
router.post('/generate/multiple', optionalAuth, imageController.generateMultipleAds); // Handles single ref or from scratch

// Protected routes for managing user's generated images (stored in Supabase)
router.get('/user/images', verifyToken, imageController.getUserImages);
router.delete('/user/images/:id', verifyToken, imageController.deleteUserImage);

// Serve images from Supabase storage (for images generated by AI and stored in Supabase)
// This route might be for direct access via ID if needed, but usually, you'd use the public URL.
router.get('/images/supabase/:id', imageController.getSupabaseImage); // verifyToken might be needed depending on access


// OLD ROUTE - Serving images directly from local './uploads' - This is generally not for production.
// If your AdCreator previews images using local paths like /api/images/somefile.png, it would hit this.
// For social posts, you should be using the Supabase public URL.
router.get('/images/:filename', (req, res) => {
  const { filename } = req.params;
  const filePath = path.join(__dirname, '../uploads', filename);
  
  // Add security check: ensure filename doesn't try to access files outside 'uploads'
  const safePath = path.normalize(filename).replace(/^(\.\.(\/|\\|$))+/, '');
  if (safePath !== filename) {
       return res.status(400).json({ error: 'Invalid filename' });
   }

  if (fs.existsSync(filePath)) {
    // Check if it's a .meta file and deny access
    if (filename.endsWith('.meta')) {
        return res.status(403).json({ error: 'Access denied' });
    }
    return res.sendFile(filePath);
  } else {
    return res.status(404).json({ error: 'Local temporary image not found' });
  }
});


module.exports = router;